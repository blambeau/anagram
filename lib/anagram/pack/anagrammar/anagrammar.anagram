module Anagram
  module Pack
    grammar Anagrammar
      include Anagram::Pack::Anagrammar::SyntaxTree
      
      ### Master declarations #################################################
      rule grammar_file
        prefix:space? 
          module_or_grammar:(module_declaration / grammar)        
        suffix:space?                                              <SyntaxTree>
      end
      rule module_declaration
        prefix:('module' space module_name:module_qualified_name space)        
          module_contents:(module_declaration / grammar) 
        suffix:(space 'end')                                       <ModuleDecl>
      end
      rule grammar
        'grammar' space grammar_name space ('do' space)? 
          include_list parsing_rule_list space? 
        'end'                                                         <Grammar>
      end
      rule include_list
        include_declaration*                                      <IncludeList>
      end
      rule include_declaration
        'include' space module_name:module_qualified_name space       <Include>
      end
      rule parsing_rule_list
        (parsing_rule space)*                                 <ParsingRuleList>
      end

      ### Parsing rule ########################################################
      rule parsing_rule
        'rule' space rule_name space ('do' space)? 
          parsing_expression space 
        'end'                                                     <ParsingRule>
      end
      rule parsing_expression
        choice / sequence / primary
      end

      ### Choice and alternatives #############################################
      rule choice
        head:alternative tail:(space? '/' space? alternative)+         <Choice>
      end
      rule alternative
          sequence
        / primary
      end

      ### Sequence and sequenced ##############################################
      rule sequence
        head:labeled tail:(space labeled)+
        type_decl:type_decl?                            <Sequence>
      end
      rule labeled
        label:(label_name ':' / '')? primary:sequence_primary         <Labeled>
      end
      rule sequence_primary
          prefix atomic                                               <Primary>
        / atomic suffix                                               <Primary>
        / atomic
      end

      ### Primary #############################################################
      rule primary
          prefix atomic                                               <Primary>
        / atomic suffix type_decl:type_decl?             <Primary>
        / atomic        type_decl:type_decl?             <Primary>
      end

      ### Atomic ##############################################################
      rule atomic
          terminal
        / nonterminal
        / '(' space? parsing_expression space? ')'              <Parenthesized> 
      end
      rule terminal
          '"' string:(!'"' ("\\\\" / '\"' / .))* '"'                 <Terminal>
        / "'" string:(!"'" ("\\\\" / "\\'" / .))* "'"                <Terminal>
        / '[' characters:(!']' ('\\' . /!'\\' .))+ ']'         <CharacterClass>
        / '.'                                                  <AnythingSymbol>
      end
      rule nonterminal
        !keyword_inside_grammar rule_name                         <Nonterminal>
      end

      ### Prefix and suffix ###################################################
      rule suffix
          '?'                                                        <Optional>
        / '+'                                                       <OneOrMore> 
        / '*'                                                      <ZeroOrMore>
      end
      rule prefix
          '&'                                                    <AndPredicate> 
        / '!'                                                    <NotPredicate> 
        / '~'                                                       <Transient>
      end

      ### Node class expression ###############################################
      rule type_decl
          module_type space inline_module                        <NodeTypeDecl>
        / module_type ''                                         <NodeTypeDecl>
        / space inline_module                                    <NodeTypeDecl>
      end
      rule module_type
        space '<' name:(!'>' .)+ '>'                               <ModuleType>
      end
      rule inline_module
        '{' (inline_module / ![{}] .)* '}'                       <InlineModule>
      end

      ### Names ###############################################################
      rule grammar_name
        [A-Z] [A-Za-z0-9_]*
      end
      rule module_name
        [A-Z] [A-Za-z0-9_]*
      end
      rule module_qualified_name
        module_name ('::' module_name)*
      end
      rule rule_name
        [a-z_] [a-z0-9_]*
      end
      rule label_name
        [a-z_] [a-z0-9_]*
      end

      ### Spaces, keywords, chars #############################################
      rule keyword_inside_grammar
        ('rule' / 'end') !non_space_char
      end
      rule non_space_char
        !space .
      end
      rule space
        ([ \t\n\r]+ / comment_to_eol)+
      end
      rule comment_to_eol
        '#' (!"\n" .)*
      end

    end
  end
end
